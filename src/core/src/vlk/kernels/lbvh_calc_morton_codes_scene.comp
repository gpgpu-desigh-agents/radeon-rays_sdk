/**********************************************************************
Copyright (c) 2020 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
********************************************************************/
#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "common.h"
#include "pp_common.h"
#include "bvh2.h"

#define RR_FLT_MIN 1.175494e-38
#define RR_FLT_MAX 3.402823e+38

// Full span BVH buffer.
layout(set = 0, binding = 0) buffer BVH
{
    BVHNode g_bvh[];
};

layout(set = 0, binding = 1) buffer Transforms
{
    Transform g_transforms[];
};


// Morton codes.
layout(set = 0, binding = 2) buffer MortonCodes
{
    uint g_morton_codes[];
};

// Indices.
layout(set = 0, binding = 3) buffer Indices
{
    uint g_indices[];
};

// Whole mesh AABB
layout(set = 0, binding = 4) buffer SceneAABB
{
    uint g_scene_aabb[8];
};

layout(set = 1, binding = 0) buffer InstanceDesc
{
    InstanceDescription g_descs[];
};

layout(set = 1, binding = 1) buffer ChildrenBVH
{
    BVHNode g_nodes[];
} g_children_bvh[2048];


// Push constants.
layout (push_constant) uniform PushConstants
{
    // Stride in the vertex buffer.
    uint g_instance_count;
};

layout (local_size_x = RR_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

void main()
{
    DECLARE_BUILTINS_1D;
    for (int i = 0; i < PRIMITIVES_PER_THREAD; ++i)
    {
        //  Calculate linear primitive index.
        uint index = gidx * PRIMITIVES_PER_THREAD + i;
        if (index < g_instance_count)
        {
            InstanceDescription desc = g_descs[index];
            BVHNode geometry_root = g_children_bvh[nonuniformEXT(index)].g_nodes[0];
            Aabb left_aabb = Aabb(geometry_root.aabb0_min_or_v0, geometry_root.aabb0_max_or_v1);
            Aabb right_aabb = Aabb(geometry_root.aabb1_min_or_v2, geometry_root.aabb1_max_or_v3);
            Aabb aabb = calculate_aabb_union(left_aabb, right_aabb);
            transform_aabb(aabb, desc.transform);

            Aabb scene_aabb;
            scene_aabb.pmin.xyz = Uint3ToFloat3(uvec3(g_scene_aabb[0], g_scene_aabb[1], g_scene_aabb[2]));
            scene_aabb.pmax.xyz = Uint3ToFloat3(uvec3(g_scene_aabb[4], g_scene_aabb[5], g_scene_aabb[6]));
            vec3 scene_extents = scene_aabb.pmax - scene_aabb.pmin;

            vec3 p = 0.5 * (aabb.pmin + aabb.pmax);

            p = (p - scene_aabb.pmin) / scene_extents;

            uint morton_code = calculate_morton_code(p);

            g_morton_codes[index] = morton_code;
            g_indices[index] = g_descs[index].index;
        }
    }
}

